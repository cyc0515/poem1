<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.poem.mapper.PoemCollectMapper">
    
    <resultMap type="PoemCollect" id="PoemCollectResult">
        <result property="id"    column="ID"    />
        <result property="poemId"    column="poem_id"    />
        <result property="userId"    column="user_id"    />
        <result property="delFlag"    column="del_flag"    />
        <result property="comment"    column="comment"    />
        <result property="poemName"    column="poem_name"    />
        <result property="poemDynasty"    column="poem_dynasty"    />
        <result property="poemWriterId"    column="poem_writer_id"    />
        <result property="userName"    column="user_name"    />
        <result property="poemContent"    column="poem_content"    />
        <result property="poemAnnotation"    column="poem_annotation"    />
        <result property="poemAppreciation"    column="poem_appreciation"    />
        <result property="poemSentiment"    column="poem_sentiment"    />
        <result property="picture"    column="picture"    />
        <result property="poemTypeId"    column="poem_type_id"    />
        <result property="poemUploadTime"    column="poem_upload_time"    />

    </resultMap>

    <resultMap id="PoemCollectPoemInfoResult" type="PoemCollect" extends="PoemCollectResult">
        <collection property="poemInfoList" notNullColumn="ID" javaType="java.util.List" resultMap="PoemInfoResult" />
    </resultMap>

    <resultMap type="PoemInfo" id="PoemInfoResult">
        <result property="id"    column="ID"    />
        <result property="poemName"    column="poem_name"    />
        <result property="poemDynasty"    column="poem_dynasty"    />
        <result property="poemWriterId"    column="poem_writer_id"    />
        <result property="poemContent"    column="poem_content"    />
        <result property="poemAnnotation"    column="poem_annotation"    />
        <result property="poemAppreciation"    column="poem_appreciation"    />
        <result property="poemSentiment"    column="poem_sentiment"    />
        <result property="picture"    column="picture"    />
        <result property="poemTypeId"    column="poem_type_id"    />
        <result property="userName"    column="user_name"    />
        <result property="poemUploadTime"    column="poem_upload_time"    />
        <result property="auditStatus"    column="audit_status"    />
        <result property="auditorId"    column="auditor_id"    />
        <result property="delFlag"    column="del_flag"    />
    </resultMap>

    <sql id="selectPoemCollectVo">
        select c.ID, c.poem_id, c.user_id, c.comment ,d.poem_name ,d.poem_dynasty , d.poem_writer_id ,c.user_name
        from ( select a.*,b.user_name from poem_collect a left join sys_user b on a.user_id = b.user_id  where a.del_flag=0 and b.del_flag=0
        ) c
        left join poem_info d on c.poem_id = d.id

    </sql>

    <select id="selectPoemCollectList" parameterType="PoemCollect" resultMap="PoemCollectResult">
        <include refid="selectPoemCollectVo"/>
        <where>  
            <if test="poemName != null and  poemName != ''"> and d.poem_name like concat('%', #{poemName}, '%') </if>
            and c.del_flag = 0 and d.del_flag = 0 and d.audit_status = 3
        </where>
    </select>
    
    <select id="selectPoemCollectById" parameterType="Long" resultMap="PoemCollectResult">
        select a.ID,a.comment,
        b.ID,b.poem_name, b.poem_dynasty, b.poem_writer_id, b.poem_content, b.poem_annotation, b.poem_appreciation, b.poem_sentiment, b.picture, b.poem_type_id, b.poem_upload_time,b.user_name
        from poem_collect a
        left join poem_info b on b.ID = a.poem_id
        where a.ID = #{id} and a.del_flag = 0 and b.del_flag = 0 and b.audit_status = 3
    </select>
        
    <insert id="insertPoemCollect" parameterType="PoemCollect">
        insert into poem_collect
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="poemId != null">poem_id,</if>
            <if test="userId != null">user_id,</if>
            <if test="delFlag != null">del_flag,</if>
            <if test="comment != null">comment,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="poemId != null">#{poemId},</if>
            <if test="userId != null">#{userId},</if>
            <if test="delFlag != null">#{delFlag},</if>
            <if test="comment != null">#{comment},</if>
         </trim>
    </insert>

    <update id="updatePoemCollect" parameterType="PoemCollect">
        update poem_collect
        <trim prefix="SET" suffixOverrides=",">
            <if test="poemId != null">poem_id = #{poemId},</if>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="delFlag != null">del_flag = #{delFlag},</if>
            <if test="comment != null">comment = #{comment},</if>
        </trim>
        where ID = #{id} del_flag = 0
    </update>

    <update id="deletePoemCollectById" parameterType="Long">
        update  poem_collect set del_flag = 1 where ID = #{id} and del_flag = 0
    </update>

    <delete id="deletePoemCollectByIds" parameterType="String">
        update  poem_collect set del_flag = 1 where del_flag = 0 and ID in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deletePoemInfoByID" parameterType="Long">
        delete from poem_info where ID = #{iD}
    </delete>

    <insert id="batchPoemInfo">
        insert into poem_info( ID, poem_name, poem_dynasty, poem_writer_id, poem_content, poem_annotation, poem_appreciation, poem_sentiment, picture, poem_type_id, user_name, poem_upload_time, audit_status, auditor_id, del_flag) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.id}, #{item.poemName}, #{item.poemDynasty}, #{item.poemWriterId}, #{item.poemContent}, #{item.poemAnnotation}, #{item.poemAppreciation}, #{item.poemSentiment}, #{item.picture}, #{item.poemTypeId}, #{item.userName}, #{item.poemUploadTime}, #{item.auditStatus}, #{item.auditorId}, #{item.delFlag})
        </foreach>
    </insert>
</mapper>